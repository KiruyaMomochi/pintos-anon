		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP22 ----

>> Fill in the names and email addresses of your group members.

Qitan Long <longqt@shanghaitech.edu.cn>
Haotian Jing <jinght@shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Add the arguments downward,then add their addresses from the last one to the first.
Push the address of argv and argc representing the length of argv[] at the end of the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Protect from multiple access by different process.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Prevent user from direct calling kernel function.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct process
{
  struct thread *thread;
  char name[16];

  pid_t pid;     /* Process Id */
  int exit_code; /* Exit status. */

  struct file **fd_table; /* File descriptor table. */
  int fd_count;           /* Number of open files. */

  struct process *parent;      /* Parent process. */
  struct list chilren;         /* List of child processes. */
  struct list_elem child_elem; /* List element for children list. */

  bool load_success; /* Whether the process was loaded successfully. */
  struct semaphore load_sema; /* Semaphore for loading. */
  struct semaphore wait_sema; /* Semaphore for waiting. */
  struct semaphore exit_sema; /* Semaphore for exiting. */

  struct file *executable; /* Executable file. */
};

Illusion of process.

struct thread
{
  /* Owned by thread.c. */
  tid_t tid;                 /* Thread identifier. */
  enum thread_status status; /* Thread state. */
  char name[16];             /* Name (for debugging purposes). */
  uint8_t *stack;            /* Saved stack pointer. */
  int priority;              /* Priority. */
  struct list_elem allelem;  /* List element for all threads list. */

  /* Shared between thread.c and synch.c. */
  struct list_elem elem; /* List element. */

#ifdef USERPROG
  /* Owned by userprog/process.c. */
  uint32_t *pagedir; /* Page directory. */
  + struct process *process;
#endif

  /* Owned by thread.c. */
  unsigned magic; /* Detects stack overflow. */
};

Add the thread's corresponding process. 

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

We use a dynamic array to record file pointer.
This array is unique within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

First we create a empty user page mapped to a kernel page.
Allocate a new empty kernel page in kernel, and set it mapped with its according user page in user memory.
If successfully mapped, set esp to target at the physical memory so that kernel can access user memory by access user's interrupt frame.

Then we load the arguments into intr_frame's stack ,according to the ARGUMENT PASSING algorithm.
After doing this, we are ready to read/write.
If the arguments syscall read/write, the kernel check the interrupt frame's stack pointer.
If exists,check read/write mode.
If 0(Read)/1(Write),representing standard io, get the arguments into buffer.
Otherwise get from file f ,located by fp, and read/write from file. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For a full page:the least number is 1 (page's head).
The page may not be contigous when allocating. 
If not contigous,the greatest possible num may be 4096.Because it requires us to check every address to be valid in page.
If contigous,just check 2 num is enough.First get a address in page,then we can check the head of this page since this is contigous.
Then we know the page is mapped into user space.

For a 2 bytes page:
Least number is still 1.
Whatever it is contigous or not, the greatest number is 2 ,since we only gets 2 bytes.
But for kernel, since we only know where the head of page is , still need to check second address.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Every call for wait by a process sema_down its wait_sema.
When this process is scheduled to run again(now thread is dying), store exit_code and wake other process.
Wait to be woken up again(time to die).then wake other process and return exit_code;

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We implement two check: check_string and check_sp_args. 
By checking the address of each elements in user stack,
These ensure argv and string are loaded successfully into user stack.
Every time we syscall.Handler will first check the sp's value to determine which syscall is called.
Suppose we syscall write.The syscall interrupt frame has load the argv.
Since we have the length of argv,and the address of argv and argv[0] at the bottom where our pointer point at,
we can get the arguments from *(sp + 1) *(sp + 2) *(sp + 3)
                              ---fp---  -buffer-  --size--
Check if file fp pointing at is null, if null, this syscall can't be executed.Exit this thread.

The buffer will be check by file system when read/write.
Then we just check if loading argv succeed and if the file exists in our file descripter.
Other syscall are similar.If involved reading string,check address in user stack.If involved file operations, check if file exists.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We wake other processes and sleep this process.If this process is still woken up, return PID_ERRORs.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When a process exits with parent, it wakes up other process and then sleep.
This ensures no race condition between P and C.(They wait until all process are waiting to exit)
When it woken up again, delete itself from child_list and free its file descripters and its pointers to parent.
Then wait until other parent processes to be freed.
This ensures no process will terminate until all process has been freed.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We get page address from user's intr_frame and then get data from this address.
This method is used only when system calls. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantage: efficient to fetch every files' address.
Disadvantage: frequent memory allocation, may waste a large amount of memory.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Did not change, a tid represent a pid.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
